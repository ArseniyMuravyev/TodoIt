swagger: "2.0"
info:
  description: "This is a simple API for managing todo items."
  version: "1.0.0"
  title: "Todo API"
host: "localhost:5000"
basePath: "/"
schemes:
  - "http"
paths:
  /todos:
    get:
      summary: "Lists all the todos"
      operationId: "getTodos"
      produces:
        - "application/json"
      responses:
        200:
          description: "An array of todos"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Todo"
    post:
      summary: "Create a new todo"
      operationId: "addTodo"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Todo object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Todo"
      responses:
        200:
          description: "New todo created"
          schema:
            $ref: "#/definitions/Todo"
  /todos/{id}:
    get:
      summary: "Find todo by ID"
      description: "Returns a single todo"
      operationId: "getTodoById"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of todo to return"
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Todo"
        404:
          description: "Todo not found"
    put:
      summary: "Updates a todo"
      description: "Updates an existing todo"
      operationId: "updateTodo"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of todo that needs to be updated"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Updated todo object"
          required: true
          schema:
            $ref: "#/definitions/Todo"
      responses:
        200:
          description: "Todo updated"
          schema:
            $ref: "#/definitions/Todo"
        404:
          description: "Todo not found"
    delete:
      summary: "Deletes a todo"
      description: "Deletes an existing todo"
      operationId: "deleteTodo"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the todo that needs to be deleted"
          required: true
          type: "string"
      responses:
        200:
          description: "Todo deleted"
        404:
          description: "Todo not found"

  /auth/register:
    post:
      summary: "Registers a new user"
      operationId: "registerUser"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "User object that needs to be registered"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        200:
          description: "User registered"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "User already exists"

  /auth/login:
    post:
      summary: "Authenticates a user and returns a token"
      operationId: "loginUser"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "User's login credentials"
          required: true
          schema:
            $ref: "#/definitions/LoginBody"
      responses:
        200:
          description: "Login successful"
          schema:
            $ref: "#/definitions/Token"
        401:
          description: "Unauthorized"

  /auth/logout:
    post:
      summary: "Logs out the current user"
      operationId: "logoutUser"
      produces:
        - "application/json"
      responses:
        200:
          description: "Logout successful"

  /user/{id}/avatar:
    post:
      summary: "Uploads an avatar image for the user."
      operationId: "uploadAvatar"
      consumes:
        - "multipart/form-data"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
        - name: "avatar"
          in: "formData"
          type: "file"
          required: true
          description: "The file to upload."
      responses:
        200:
          description: "Avatar successfully uploaded"
        400:
          description: "Invalid input"
    delete:
      summary: "Deletes a user's avatar"
      description: "Deletes the avatar of the user with the provided ID."
      operationId: "deleteAvatar"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
      responses:
        200:
          description: "Avatar successfully deleted"
        404:
          description: "Avatar not found"

  /user/{id}:
    delete:
      summary: "Deletes a user"
      description: "Deletes the user with the provided ID."
      operationId: "deleteUser"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
      responses:
        200:
          description: "User successfully deleted"
        404:
          description: "User not found"

    put:
      summary: "Updates a user"
      description: "Updates the information of the user with the provided ID."
      operationId: "updateUser"
      consumes:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "User object that needs to be updated"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        200:
          description: "User information updated"
          schema:
            $ref: "#/definitions/User"
        404:
          description: "User not found"

definitions:
  Todo:
    type: "object"
    required:
      - "title"
    properties:
      _id:
        type: "string"
      title:
        type: "string"
      completed:
        type: "boolean"
      date:
        format: "date-time" 
        type: "string"
    example:
      _id: "d5fE_asz"
      title: "Walk the dog"
      completed: false
  User:
    type: "object"
    required:
      - "name"
      - "email"
      - "password"
    properties:
      _id:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      name:
        type: "string"
      resetCode:
        type: "string"
      resetCodeExpire:
        type: "integer"
    example:
      _id: "d5fE_aszasdasdq"
      email: "johndoe@gmail.com"
      password: "password"
      name: "John"
  Token: 
    type: "object"
    properties:
      refreshToken:
        type: "string"
    required:
      - "refreshToken"
  LoginBody:
    type: "object" 
    required:
      - "email"
      - "password"
    properties:
      email:
        type: "string"
      password:
        type: "string"